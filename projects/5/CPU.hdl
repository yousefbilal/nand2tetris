// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in= instruction[15], out= nota);
    Or(a= nota, b= instruction[5], out= notaOrd1);
    Mux16(a= instruction, b= alu, sel= instruction[15], out= muxA);
    
    ARegister(in= muxA, load= notaOrd1, out= Areg);
    And(a= instruction[15], b= instruction[4], out= loadD);
    DRegister(in= alu, load= loadD, out= Dreg);
    
    Mux16(a= Areg, b= inM, sel= instruction[12], out= Aop);
    ALU(x= Dreg, y= Aop, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= alu, out=outM, zr= zr, ng= ng);
    And(a= instruction[3], b= instruction[15], out= writeM);
    Or16(a= Areg, b= false, out[0..14]= addressM);
    
    Not(in= zr, out= notZr);
    Not(in= ng, out= notNg);
    And(a= notNg, b= notZr, out= GT);
    Or(a= ng, b= zr, out= LE);
    Mux8Way16(a= false, b[0]= GT, c[0]= zr, d[0]= notNg, e[0]= ng, f[0]= notZr, g[0]= LE, h[0]= true, sel= instruction[0..2], out[0]= pcMux);
    And(a= pcMux, b= instruction[15], out= pcLoad);
    PC(in= Areg, load= pcLoad, inc= true, reset= reset, out[0..14]= pc);
}